"use strict";(self.webpackChunkgincumentation=self.webpackChunkgincumentation||[]).push([[332],{2729:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=r(5893),t=r(1151);const s={sidebar_position:3},d="Middleware",o={id:"http/middleware",title:"Middleware",description:"Gin's middleware function is a key feature, providing a way to process requests before they reach the actual handlers, and responses before they're sent back to the client.",source:"@site/docs/http/middleware.md",sourceDirName:"http",slug:"/http/middleware",permalink:"/gincumentation/docs/http/middleware",draft:!1,unlisted:!1,editUrl:"https://github.com/filipenevs/gincumentation/tree/main/docs/http/middleware.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"apiSidebar",previous:{title:"Context",permalink:"/gincumentation/docs/http/context"},next:{title:"Static",permalink:"/gincumentation/docs/http/static"}},a={},l=[{value:"Overview",id:"overview",level:2},{value:"How Middleware Works",id:"how-middleware-works",level:2},{value:"Types of Middleware",id:"types-of-middleware",level:2},{value:"Ready-to-use Middlewares",id:"ready-to-use-middlewares",level:2},{value:"Writing Custom Middleware",id:"writing-custom-middleware",level:2},{value:"Using Middleware",id:"using-middleware",level:2},{value:"Global Middlweare",id:"global-middlweare",level:3},{value:"Group-Specific Middleware",id:"group-specific-middleware",level:3},{value:"Route-Specific Middleware",id:"route-specific-middleware",level:3},{value:"Aborting a Request",id:"aborting-a-request",level:2},{value:"Basic Abort",id:"basic-abort",level:3},{value:"Abort with status",id:"abort-with-status",level:3},{value:"Abort with status and JSON",id:"abort-with-status-and-json",level:3},{value:"Returning an Error",id:"returning-an-error",level:3},{value:"Handling Errors",id:"handling-errors",level:3},{value:"Use Cases",id:"use-cases",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"middleware",children:"Middleware"}),"\n",(0,i.jsx)(n.p,{children:"Gin's middleware function is a key feature, providing a way to process requests before they reach the actual handlers, and responses before they're sent back to the client."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Definition:"})," Middleware is a piece of code that gets executed before and/or after the main handler is executed. It's commonly used for logging, authentication, data preprocessing, and more."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-middleware-works",children:"How Middleware Works"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution Order:"})," Middleware functions are executed in the order they are added. If added globally, they apply to all routes. If added to a group or specific route, they only apply there."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access to Context:"})," Each middleware function receives a Gin ",(0,i.jsx)(n.code,{children:"Context"})," object, which lets it interact with the request and response, and even modify them."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flow Control:"})," Middleware can decide whether to pass the context to the next piece of middleware or handler in the chain, or to abort the chain."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-middleware",children:"Types of Middleware"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global Middleware:"})," Applied to all routes in the application.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example: Logger, Recovery (provided by Gin)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Group-Specific Middleware:"})," Applied only to routes within a specific group.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Useful for scenarios like admin routes needing authentication."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Route-Specific Middleware:"})," Applied to specific routes.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Good for when only certain endpoints require specific processing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"ready-to-use-middlewares",children:"Ready-to-use Middlewares"}),"\n",(0,i.jsx)(n.p,{children:"There are some ready-to-use middlewares available made by the community."}),"\n",(0,i.jsxs)(n.p,{children:["You can find them at ",(0,i.jsx)(n.a,{href:"https://github.com/gin-contrib",children:"gin-contrib"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"writing-custom-middleware",children:"Writing Custom Middleware"}),"\n",(0,i.jsxs)(n.p,{children:["A Gin middleware is simply a function that takes a Gin ",(0,i.jsx)(n.code,{children:"Context"})," and returns nothing. It calls ",(0,i.jsx)(n.code,{children:"c.Next()"})," to pass control to the next handler or middleware:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func MyCustomMiddleware(c *gin.Context) {\n  // Pre-processing code here\n  c.Next()\n  // Post-processing code here\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-middleware",children:"Using Middleware"}),"\n",(0,i.jsx)(n.h3,{id:"global-middlweare",children:"Global Middlweare"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"r := gin.Default()\nr.Use(MyCustomMiddleware)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"group-specific-middleware",children:"Group-Specific Middleware"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'v1 := r.Group("/admin").Use(MyCustomMiddleware)\nv1.GET("/dashboard", adminDashboardHandler)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"route-specific-middleware",children:"Route-Specific Middleware"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'r.GET("/dashboard", MyCustomMiddleware, dashboardHandler)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"aborting-a-request",children:"Aborting a Request"}),"\n",(0,i.jsx)(n.h3,{id:"basic-abort",children:"Basic Abort"}),"\n",(0,i.jsxs)(n.p,{children:["To immediately stop processing further handlers in the middleware chain, you use the ",(0,i.jsx)(n.code,{children:"c.Abort()"})," method of the Gin context. After calling ",(0,i.jsx)(n.code,{children:"c.Abort()"}),", Gin will not call any subsequent handlers in the chain for the current request."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func MyAuthMiddleware() gin.HandlerFunc {\n  return func(c *gin.Context) {\n    // Suppose you have some logic to check authentication\n    if !isAuthenticated(c) {\n      c.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})\n      c.Abort() // This aborts processing any further middleware or handlers\n      return\n    }\n    // If authenticated, continue to the next handler\n    c.Next()\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"abort-with-status",children:"Abort with status"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"c.AbortWithStatus()"})," aborts the processing of the request and writes the specified HTTP status code to the response. It's a convenient way to stop further processing and immediately respond with a status code."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func MyCheckMiddleware() gin.HandlerFunc {\n  return func(c *gin.Context) {\n    if someCheckFails {\n      c.AbortWithStatus(http.StatusForbidden) // Immediately abort with a 403 Forbidden status\n      return\n    }\n    c.Next()\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"abort-with-status-and-json",children:"Abort with status and JSON"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"c.AbortWithStatusJSON()"})," is similar to ",(0,i.jsx)(n.code,{children:"c.AbortWithStatus"}),", but it also allows you to send a JSON response along with the status code. This is especially useful when you want to return a structured error message or additional data in the response."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func MyAuthMiddleware() gin.HandlerFunc {\n  return func(c *gin.Context) {\n    if !isAuthenticated(c) {\n      c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "unauthorized", "detail": "Token is invalid or expired"})\n      return\n    }\n    c.Next()\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"returning-an-error",children:"Returning an Error"}),"\n",(0,i.jsxs)(n.p,{children:["To return an error from a middleware, you use the ",(0,i.jsx)(n.code,{children:"c.AbortWithError()"})," method. This method not only aborts the processing of further handlers but also attaches an error to the context. This error can then be logged or processed by subsequent middleware (like a custom error handling middleware)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func MyErrorEmittingMiddleware() gin.HandlerFunc {\n  return func(c *gin.Context) {\n    // Some error condition\n    if someErrorCondition {\n      err := errors.New("some error occurred")\n      c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypePrivate)\n      return\n    }\n    c.Next()\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"handling-errors",children:"Handling Errors"}),"\n",(0,i.jsx)(n.p,{children:"It's common to have a custom error handling middleware at the end of your middleware chain to catch and process any errors. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ErrorHandler() gin.HandlerFunc {\n return func(c *gin.Context) {\n   c.Next() // Execute all the handlers\n\n   // Check if there are any errors\n   if len(c.Errors) > 0 {\n     // Process the errors, log them, or return a generic error response\n     c.JSON(http.StatusInternalServerError, gin.H{"error": "internal server error"})\n   }\n }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication:"})," Check if a user is authenticated and authorized to access a route."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logging:"})," Log details about the request/response for debugging or analytics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Validation:"})," Validate or sanitize input data before it reaches the handler."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling:"})," Centralize error handling logic in one place."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Setting Headers:"})," Add common headers to responses, like CORS headers."]}),"\n"]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.admonition,{title:"Best Practices",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep it Light:"})," Middleware should be lightweight and not perform heavy processing, to avoid slowing down the request/response cycle."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reusability:"})," Write middleware functions to be reusable across different parts of the application."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>d});var i=r(7294);const t={},s=i.createContext(t);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);